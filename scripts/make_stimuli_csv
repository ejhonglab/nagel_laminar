#!/usr/bin/env python

"""
Converts *_stimuli.p pickle file to a CSV with columns
'onset','offset','overlay', for use by the multi_tracker bag2vid.py script, or
other analysis.
"""

from __future__ import division

import os
import glob
import pickle
import csv

import rospy


def main():
    # Look for *_stimuli.p pickle files in current directory.
    # In this case, these files should be generated by the `stimuli` script
    # `nagel.py`.
    stimuli_pickles = glob.glob('*_stimuli.p')
    assert len(stimuli_pickles) == 1
    stimuli_pickle = stimuli_pickles[0]
    del stimuli_pickles

    with open(stimuli_pickle, 'rb') as f:
        data = pickle.load(f)

    output_csv = os.path.splitext(stimuli_pickle)[0] + '.csv'
    # So that the `nagel_laminar` script `bag2vid` can use this filename as an
    # argument for something else.
    print(output_csv)

    odor_on_label = 'Odor On'

    # 'onset' and 'offset' are both absolute times (Unix timestamps, which are
    # in units of seconds), and 'overlay' is a string to display between these
    # times (which is always "Odor On" here).
    fieldnames = ['onset', 'offset', 'overlay']

    with open(output_csv, 'w') as f:
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()

        last_delay_end = None
        # data[0] just contains default states for pins, which should all be
        # False (0v) anyway.
        # Elements of data[1] will be either rospy.Time or
        # stimuli.srv.LoadSequenceRequest.
        for x in data[1]:
            # Information here (when we delayed until before starting an odor
            # sequence) is redundant with start time in the following
            # `stimuli.srv.LoadSequenceRequest` object.
            if isinstance(x, rospy.Time):
                last_delay_end = x
                continue

            start = x.seq.start
            assert last_delay_end == start
            ms_on = None
            # A list of stimuli.msg.Transition
            for e in x.seq.seq:
                assert e.t == start
                if ms_on is None:
                    ms_on = e.s.ms_on
                else:
                    # In the Nagel experimental design, all valves should be
                    # pulsed for the same length.
                    assert ms_on == e.s.ms_on
            assert ms_on is not None

            onset_s = start.to_sec()
            offset_s = onset_s + (ms_on / 1000.0)

            # TODO maybe also assert all next onset_s are same offset from
            # previous offset_s? and all offset_s are the same distance from
            # onset_s?

            writer.writerow({
                'onset': onset_s,
                'offset': offset_s,
                'overlay': odor_on_label
            })


if __name__ == '__main__':
    main()

